<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FichierTermineInvalide" xml:space="preserve">
    <value>文件名不能以路径分隔符结束。！</value>
  </data>
  <data name="RepertoiresSeparateursInvalides" xml:space="preserve">
    <value>路径片段“{0}”包含无效的目录分隔符。!</value>
  </data>
  <data name="ConsoleEstTropPetite" xml:space="preserve">
    <value>啊，我的眼睛！为什么这个游戏机太小了？ ！</value>
  </data>
  <data name="FichierGspInvalide" xml:space="preserve">
    <value>GSP文件无效。！</value>
  </data>
  <data name="INFO" xml:space="preserve">
    <value>信息</value>
  </data>
  <data name="SUCCES" xml:space="preserve">
    <value>成功</value>
  </data>
  <data name="ERREUR" xml:space="preserve">
    <value>错误</value>
  </data>
  <data name="AVERTISSEMENT" xml:space="preserve">
    <value>警告</value>
  </data>
  <data name="TailleDeCleInvalide" xml:space="preserve">
    <value>无效加密密钥的长度。加密密钥必须为32个字节。！</value>
  </data>
  <data name="InitArchive" xml:space="preserve">
    <value>正在初始化存档。！</value>
  </data>
  <data name="CreationDArchive" xml:space="preserve">
    <value>正在 {0} 处创建存档... ！</value>
  </data>
  <data name="FichierAjouteGsP" xml:space="preserve">
    <value>文件已添加： {0} （原始大小： {1} 字节）。!</value>
  </data>
  <data name="CreationDArchiveTerminee" xml:space="preserve">
    <value>存档创建完成。！</value>
  </data>
  <data name="ExtractionDArchive" xml:space="preserve">
    <value>正在从 {0} 提取存档... ！</value>
  </data>
  <data name="SignatureDArchiveInvalide" xml:space="preserve">
    <value>存档签名无效。！</value>
  </data>
  <data name="VersionGsPNonSupportee" xml:space="preserve">
    <value>不支持的GsP版本： {0} 。!</value>
  </data>
  <data name="ErreurGsPDeSomme" xml:space="preserve">
    <value>文件 {0} 的校验和错误。提取已中断。！</value>
  </data>
  <data name="NonConcordanceDeLaSommeDeControle" xml:space="preserve">
    <value>校验和不匹配。！</value>
  </data>
  <data name="FichierExtrait" xml:space="preserve">
    <value>已提取文件： {0} 。!</value>
  </data>
  <data name="ExtractionTerminee" xml:space="preserve">
    <value>取出完成 。</value>
  </data>
  <data name="ListeDesFichiersDansLArchive" xml:space="preserve">
    <value>存档 {0} 中的文件列表... ！</value>
  </data>
  <data name="FichierTrouve" xml:space="preserve">
    <value>已找到文件： {0} 。!</value>
  </data>
  <data name="FichierTrouve4" xml:space="preserve">
    <value>已找到文件： {0} 。!</value>
  </data>
  <data name="FichierTrouve3" xml:space="preserve">
    <value>已找到文件： {0} 。!</value>
  </data>
  <data name="FichierTrouve2" xml:space="preserve">
    <value>已找到文件： {0} 。!</value>
  </data>
  <data name="FichierTrouve1" xml:space="preserve">
    <value>已找到文件： {0} 。!</value>
  </data>
  <data name="LeCheminNePeutPasEtreVide" xml:space="preserve">
    <value>路径不能为空。！</value>
  </data>
  <data name="LeNomDuFichierNePeutPasEtreVide" xml:space="preserve">
    <value>文件名不能为空</value>
  </data>
  <data name="LeMessageNePeutPasEtreVide" xml:space="preserve">
    <value>消息不能为空。！</value>
  </data>
  <data name="CheminOuNomDuJournalPasDefini" xml:space="preserve">
    <value>未设置日志文件的路径或名称。!</value>
  </data>
  <data name="AlgorithmeHachageNonImplemente" xml:space="preserve">
    <value>尚未实施哈希算法。</value>
  </data>
  <data name="LeParametreNePeutPasEtreVide" xml:space="preserve">
    <value>参数“ {0} ”不能为空。!</value>
  </data>
</root>