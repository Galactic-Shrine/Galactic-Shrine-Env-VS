<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LeNomDeLaCleNePeutPasEtreVide" xml:space="preserve">
    <value>키 이름은 비워둘 수 없습니다!</value>
  </data>
  <data name="LeNomDeLaSectionNePeutPasEtreVide" xml:space="preserve">
    <value>섹션 이름은 비워둘 수 없습니다!</value>
  </data>
  <data name="MessageExceptionErreurFormatIni" xml:space="preserve">
    <value>텍스트를 구문 분석할 수 없습니다: '{0}'. 이 오류를 무시하려면 구성 옵션 {1}. {2} 을 (를) 참조하십시오.!</value>
  </data>
  <data name="MessageExceptionDuplicationDeLaCle" xml:space="preserve">
    <value>'{1} 섹션에서' {0} '키의 복제본이 발견되었습니다!</value>
  </data>
  <data name="MessageExceptionErreurProprietesHorsSection" xml:space="preserve">
    <value>속성은 섹션에 포함되어야 합니다. 이 오류를 무시하려면 구성 옵션 {0}. {1} 을 (를) 확인하십시오.!</value>
  </data>
  <data name="MessageExceptionErreurProprietesSansCle" xml:space="preserve">
    <value>열쇠가 없는 속성을 찾았습니다. 이 오류를 무시하려면 구성 옵션 {0}. {1} 을 (를) 확인하십시오.!</value>
  </data>
  <data name="MessageExceptionErreurSectionDupliqueeAvecLeNom" xml:space="preserve">
    <value>이름이 '{0}' 인 섹션을 복제합니다. 이 오류를 무시하려면 구성 옵션 {1}. {2} 을 (를) 참조하십시오.!</value>
  </data>
  <data name="MessageExceptionErreurPasDeValeurDeSectionFermante" xml:space="preserve">
    <value>마감 섹션 값이 없습니다. 이 오류를 무시하려면 구성 옵션 {0}. {1} 을 (를) 확인하십시오.!</value>
  </data>
  <data name="TamponDeChaineToString" xml:space="preserve">
    <value>[시작: {0}, 종료: {1} 크기: {2}]!</value>
  </data>
  <data name="FichierNonTrouve" xml:space="preserve">
    <value>파일을 찾을 수 없습니다.!</value>
  </data>
  <data name="MessageExceptionErreurAnalyse0" xml:space="preserve">
    <value>라인 번호를 분석할 때!</value>
  </data>
  <data name="MessageExceptionErreurAnalyse1" xml:space="preserve">
    <value>값어치를 합니다!</value>
  </data>
</root>